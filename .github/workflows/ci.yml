name: CI - Build, Test, Scan, Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3Ô∏è‚É£ Upgrade pip, setuptools, wheel
      - name: Upgrade pip, setuptools, wheel
        run: python -m pip install --upgrade pip setuptools wheel

      # 4Ô∏è‚É£ Install runtime dependencies
      - name: Install runtime dependencies
        run: pip install -r requirements.txt --no-cache-dir

      # 5Ô∏è‚É£ Install dev dependencies for linting and security
      - name: Install dev dependencies
        run: |
          pip install flake8 bandit pbr --no-cache-dir

      # 6Ô∏è‚É£ Lint with Flake8
      - name: Lint code
        run: flake8 .

      # 7Ô∏è‚É£ Bandit security scan (pbr installed to fix ModuleNotFoundError)
      - name: Security scan with Bandit
        run: bandit -r .

      # 8Ô∏è‚É£ Run tests with coverage
      - name: Run tests
        run: |
          pip install pytest pytest-cov --no-cache-dir
          pytest --cov=app --cov-fail-under=80

      # 9Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: docker build -t user-manager:latest .

      # üîü Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.33.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.33.2_Linux-64bit.deb

      # 1Ô∏è‚É£1Ô∏è‚É£ Scan Docker image with Trivy
      - name: Scan Docker image with Trivy
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL user-manager:latest

      # 1Ô∏è‚É£2Ô∏è‚É£ Docker Hub login
      - name: Docker Hub login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

      # 1Ô∏è‚É£3Ô∏è‚É£ Tag and push Docker image
      - name: Tag and push Docker image
        run: |
          docker tag user-manager:latest docker.io/${{ secrets.DOCKER_USER }}/user-manager:latest
          docker push docker.io/${{ secrets.DOCKER_USER }}/user-manager:latest
